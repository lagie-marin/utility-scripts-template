#!/bin/bash

# Colors for output formatting
ITALIQUE='\e[3m'
GREEN='\e[32m'
BOLD='\e[1m'
NC='\033[0m'
RED='\e[1;31m'
PINK='\e[38;5;205m'

if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error:${NC} jq is required but not installed. Please install jq."
    exit 1
fi

# Function to display help information
show_help() {
    echo -e "${BOLD}Usage:${NC} translate_csr [OPTION] [CODE]"
    echo -e "Translate coding style error codes to their descriptions."
    echo -e ""
    echo -e "${BOLD}Options:${NC}"
    echo -e "  -h\t\tDisplay this help message"
    echo -e "  -u\t\tUpdate script using script-manager"
    echo -e "  -r FILE\tRegister a PDF file as a reference and convert it to TXT"
    echo -e "  -d\t\tDetect and translate error code from the end of the file"
    echo -e ""
    echo -e "${BOLD}Example:${NC}"
    echo -e "  translate_csr C-O1"
    echo -e "  translate_csr -r coding_style.pdf"
    echo -e "  translate_csr -d"
    echo -e "  translate_csr      (lists all available error codes)"
    exit 0
}

# Create FCP directory structure
ensure_fcp_dir() {
    local fcp_dir="$HOME/.fcp"
    local docs_dir="$fcp_dir/docs"
    
    if [ ! -d "$fcp_dir" ]; then
        mkdir -p "$fcp_dir"
    fi
    
    if [ ! -d "$docs_dir" ]; then
        mkdir -p "$docs_dir"
    fi
    
    # Initialize JSON file if it doesn't exist
    if [ ! -f "$fcp_dir/files.json" ]; then
        echo '{"files":[]}' > "$fcp_dir/files.json"
    fi
}

# Add file to JSON registry
add_file_to_registry() {
    local name=$(basename "$1" .txt)
    local path="$1"
    local original="$2"
    local date_added=$(date +"%Y-%m-%d")
    local json_file="$HOME/.fcp/files.json"
    
    # Check if file already exists in registry
    if jq -e ".files[] | select(.path == \"$path\")" "$json_file" > /dev/null; then
        echo -e "${ITALIQUE}Note:${NC} $path is already registered."
        return 0
    fi
    
    # Add new file entry to JSON
    local temp_file=$(mktemp)
    jq ".files += [{\"name\": \"$name\", \"path\": \"$path\", \"original\": \"$original\", \"date_added\": \"$date_added\"}]" "$json_file" > "$temp_file"
    mv "$temp_file" "$json_file"
    
    echo -e "${GREEN}Registered${NC} $name in file registry."
    return 0
}

# Get file paths from JSON registry
get_registered_files() {
    local json_file="$HOME/.fcp/files.json"
    
    if [ ! -f "$json_file" ]; then
        echo ""
        return 1
    fi
    
    # Extract paths and join with colons
    local paths=$(jq -r '.files[].path' "$json_file" | paste -sd ":" -)
    echo "$paths"
    return 0
}

# Function to convert PDF to TXT and store original PDF
convert_pdf_to_txt() {
    local pdf_file=$1
    local file_name=$(basename "$pdf_file" .pdf)
    local txt_file="$HOME/.fcp/docs/${file_name}.txt"
    local pdf_copy="$HOME/.fcp/docs/${file_name}_original.pdf"
    
    ensure_fcp_dir
    
    if [ ! -f "$pdf_file" ]; then
        echo -e "${RED}Error:${NC} File $pdf_file does not exist."
        exit 1
    fi
    
    # Copy the original PDF file to FCP directory
    cp "$pdf_file" "$pdf_copy"
    
    if command -v pdftotext >/dev/null 2>&1; then
        pdftotext "$pdf_file" "$txt_file"
        echo -e "${GREEN}Converted${NC} $pdf_file to $txt_file"
        echo -e "${GREEN}Copied${NC} original to $pdf_copy"
        
        # Register the new file with both paths
        add_file_to_registry "$txt_file" "$pdf_copy"
    else
        echo -e "${RED}Error:${NC} pdftotext is not installed. Please install poppler-utils."
        exit 1
    fi
}

# Function to register a reference file
register_file() {
    local file=$1
    
    # Check if it's a PDF file
    if [[ "$file" != *.pdf ]]; then
        echo -e "${RED}Error:${NC} Only PDF files can be registered."
        exit 1
    fi
    
    # Get the absolute path
    file=$(realpath "$file")
    
    # Convert PDF to TXT (will automatically register it)
    convert_pdf_to_txt "$file"
}

# Function to detect and translate error code from coding-style-reports.log
detect_and_translate_error() {
    # Get the path to the coding style file
    local coding_style_file=$(get_config CODING_STYLE 2>/dev/null || echo "coding-style-reports.log")
    
    if [ -z "$coding_style_file" ] || [ ! -f "$coding_style_file" ]; then
        echo -e "${RED}Error:${NC} Coding style file not found. Configure it with set_config CODING_STYLE <file_path>"
        exit 1
    fi
    
    # Process each line in the file
    while IFS= read -r line; do
        # Check if the line contains C-[A-Z][0-9]+ pattern (coding style error code)
        if [[ "$line" =~ C-[A-Z][0-9]+ ]]; then
            local error_code="${BASH_REMATCH[0]}"
            local error_name=""
            
            # Get error name from registered files
            local config_files=$(get_registered_files)
            
            if [ ! -z "$config_files" ]; then
                IFS=':' read -ra files <<< "$config_files"
                
                for file in "${files[@]}"; do
                    if [ -f "$file" ]; then
                        # Find the line containing the error code
                        local error_line=$(grep "$error_code" "$file" | head -n 1)
                        if [ ! -z "$error_line" ]; then
                            # Extract name - everything after "- " or after the code
                            error_name=$(echo "$error_line" | grep -o -E "(${error_code} *- *|\b${error_code}\b *)(.*)" | sed -E "s/(${error_code} *- *|\b${error_code}\b *)//" | sed 's/^[[:space:]]*//')
                            break
                        fi
                    fi
                done
            fi
            
            # Display the original line with the error name appended
            if [ ! -z "$error_name" ]; then
                echo -e "$line ${BOLD}$error_name${NC}"
            else
                echo -e "$line"
            fi
        else
            echo "$line"
        fi
    done < "$coding_style_file"
}

# Main script logic
if [ "$1" == "-h" ]; then
    show_help
elif [ "$1" == "-u" ]; then
    script-manager translate_csr
    exit 0
elif [ "$1" == "-r" ] && [ ! -z "$2" ]; then
    register_file "$2"
    exit 0
else
    # New option to detect and translate error from the end of the file
    detect_and_translate_error
fi