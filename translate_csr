#!/bin/sh
#Vérifie s'il n'y a pas le -d
if [ "$1" != "-d" ]; then
    script-manager
fi
ITALIQUE='\e[3m'
GREEN_AUTO='\o033[32m'
GREEN='\e[32m'
BOLD='\e[1m'
OR='\o033[38;5;214m'
NC='\033[0m'
RED='\e[1;31m'
PINK='\e[38;5;205m'

#Permets de vérifier si le fichier existe
#-e: vérifie si le fichier ou le répertoire existe
if [ -e "$(get_config CODING_STYLE)" ]; then
    #Permets de lire le fichier ligne par ligne
    #IFS=:  vous empêchez le script de diviser les lignes en champs. Cela est
    #   utile si vos lignes contiennent des espaces que vous voulez conserver.
    #read -r ligne: Permets de lire une ligne du fichier
    #-r: empêche read d'interpréter les caractères d'échappement
    #ligne: est la variable où sera stockée la ligne lue
    while IFS= read -r ligne; do
        #Permets de récupérer les 4 derniers caractères de la ligne
        dernier_caractere="${ligne: -4}"
        #Permet d'afficher la ligne avec le nom de l'erreur en rouge
        #NC permet de réinitialiser la couleur et RED permet de colorer le texte qui suit
        #en rouge.
        #-n: Permets d'empêcher le saut de ligne à la fin de l'output
        #-e: Permets d'interpréter les caractères d'échappement
        echo -ne "${NC}$ligne ${RED}"
        #Vérifie si le dernier caractère est égal à C-O1
        #Cette vérification est utilisée dans les lignes ci-dessous
        if [ "$dernier_caractere" = "C-O1" ]; then
            echo "Contents of the repository"
        elif [ "$dernier_caractere" = "C-O2" ]; then
            echo "File extension"
        elif [ "$dernier_caractere" = "C-O3" ]; then
            echo "File coherence"
        elif [ "$dernier_caractere" = "C-O4" ]; then
            echo "Naming files and folders"
        elif [ "$dernier_caractere" = "C-G1" ]; then
            echo "File header"
        elif [ "$dernier_caractere" = "C-G2" ]; then
            echo "Separating of functions"
        elif [ "$dernier_caractere" = "C-G3" ]; then
            echo "Indentation of preprocessor directives"
        elif [ "$dernier_caractere" = "C-G4" ]; then
            echo "Global variables"
        elif [ "$dernier_caractere" = "C-G5" ]; then
            echo "include"
        elif [ "$dernier_caractere" = "C-G6" ]; then
            echo "Line endings"
        elif [ "$dernier_caractere" = "C-G7" ]; then
            echo "Trailing spaces"
        elif [ "$dernier_caractere" = "C-G8" ]; then
            echo "Leading/Trailing lines"
        elif [ "$dernier_caractere" = "C-G9" ]; then
            echo "Constant values"
        elif [ "${ligne: -5}" = "C-G10" ]; then
            echo "Inline assembly"
        elif [ "$dernier_caractere" = "C-F1" ]; then
            echo "Coherence of functions"
        elif [ "$dernier_caractere" = "C-F2" ]; then
            echo "Naming functions"
        elif [ "$dernier_caractere" = "C-F3" ]; then
            echo "Number of columns"
        elif [ "$dernier_caractere" = "C-F4" ]; then
            echo "Number of lines"
        elif [ "$dernier_caractere" = "C-F5" ]; then
            echo "Number of parameters"
        elif [ "$dernier_caractere" = "C-F6" ]; then
            echo "Functions without parameters"
        elif [ "$dernier_caractere" = "C-F7" ]; then
            echo "Structures as parameters"
        elif [ "$dernier_caractere" = "C-F8" ]; then
            echo "Comments inside a function"
        elif [ "$dernier_caractere" = "C-F9" ]; then
            echo "Nested functions"
        elif [ "$dernier_caractere" = "C-L1" ]; then
            echo "Code line content"
        elif [ "$dernier_caractere" = "C-L2" ]; then
            echo "Indentation"
        elif [ "$dernier_caractere" = "C-L3" ]; then
            echo "Spaces"
        elif [ "$dernier_caractere" = "C-L4" ]; then
            echo "Curly brackets"
        elif [ "$dernier_caractere" = "C-L5" ]; then
            echo "Variable declarations"
        elif [ "$dernier_caractere" = "C-L6" ]; then
            echo "Blank lines"
        elif [ "$dernier_caractere" = "C-V1" ]; then
            echo "Naming identifiers"
        elif [ "$dernier_caractere" = "C-V2" ]; then
            echo "Structures"
        elif [ "$dernier_caractere" = "C-V3" ]; then
            echo "Pointers"
        elif [ "$dernier_caractere" = "C-C1" ]; then
            echo "Conditional branching"
        elif [ "$dernier_caractere" = "C-C2" ]; then
            echo "Ternary operators"
        elif [ "$dernier_caractere" = "C-C3" ]; then
            echo "goto"
        elif [ "$dernier_caractere" = "C-H1" ]; then
            echo "Content"
        elif [ "$dernier_caractere" = "C-H2" ]; then
            echo "Include guard"
        elif [ "$dernier_caractere" = "C-H3" ]; then
            echo "Macros"
        elif [ "$dernier_caractere" = "C-A1" ]; then
            echo "Constant pointers"
        elif [ "$dernier_caractere" = "C-A2" ]; then
            echo "Typing"
        elif [ "$dernier_caractere" = "C-A3" ]; then
            echo "Line break at the end of file"
        elif [ "$dernier_caractere" = "C-A4" ]; then
            echo "Static"

        fi
    #Permets de terminer une boucle while qui lit un fichier ligne par ligne.
    # < est un opérateur de redirection d'entrée en shell il prend le fichier
    #spécifié dans le fichier de configuration et le passe comme entrée à la boucle while
    done < $(get_config CODING_STYLE)
    #Permets de réinitialiser la couleur
    echo -e "${NC}"
fi
#Cette partie permet de récupérer la documentation du coding-style.
#-e: Permets de dire au script qu'on veux la documentation de 1 ou plusieurs
#erreur de coding-style
#Par exemple
#translate_csr -d -e C-G5 C-A1
#Il va me donner la documentation des 2 erreurs.
error_info=()
#Permets de récupérer les options donner en argument
while getopts ":e:" opt; do
    case $opt in
        e)
            #shift $((OPTIND-2)): Permets de déplacer les arguments de position
            shift $((OPTIND-2))
            #Cette boucle itère sur chaque argument de ligne de commande
            #$@: est une variable spéciale qui contient tous les arguments de ligne
            #   de commande
            for error in "$@"; do
                #Vérifie que l'argument actuel ne contient pas de -
                if [[ "$error" != -* ]]; then
                    #Ajoute l'erreur dans la liste
                    error_info+=("$error")
                else
                    break
                fi
            done
    esac
done
#word_colorize est une expression régulière qui vérifie que le mot est égale
#à l'un des mots qui se trouvent dans c'elle-si
word_colorize="#ifndef|#else|defined|#endif|#error|if|else|int|char|while|for|const|unsigned|typedef|struct|enum|define|return|long|short|void|sizeof|break"
#title est une fonction qui permet d'écrire en rouge et en bold
title() {
    echo -e "${RED}$1${NC}"
}
#bold est une fonction qui met le texte en bold
bold() {
    echo -e "${BOLD}$1${NC}"
}
#color est une fonction que mets le texte en couleurs s'ils font partie de word_colorize
color() {
    #Cette ligne permet de colorer en OR les mots qui font partie de word_colorize
    #-E: Permets à sed d'utiliser des expressions régulières étendues
    #s: C'est la commande de substitution de sed
    #\b: C'est un mot frontière. Il correspond à la position où un mot commence ou se termine.
    #s/\b((#|\t)$word_colorize|($word_colorize): C'est le motif recherché, il vérifie que le mot commence
    #   par # où par un tab où fais alors partie d'un des mots qui se trouve dans le word_colorize sans # ou tab
    val=$(echo "$1" | sed -E "s/\b((#|\t)$word_colorize|($word_colorize))/${OR}\1\o033[0m/g")
    #(\/\*)([^*]|(\*[^\/])|[*][^\/])*\*\/: C'est le motif recherché. Il correspond à un commentaire multiligne
    #   en C ou C++. Il commence par /* et se termine par */. Entre les deux, il peut y avoir n'importe quel
    #   caractère qui n'est pas une étoile ([^*]), ou une étoile suivie d'un caractère qui n'est pas une barre
    #   oblique (\*[^/]), ou une étoile suivie d'un caractère qui n'est pas une barre oblique (*[^/]).
    val=$(echo "$val" | sed -E "s/(\/\*)([^*]|(\*[^\/])|[*][^\/])*\*\//${GREEN_AUTO}&\o033[0m/g")
    #((\/\/)|(\#\#))([^*]+) : C'est le motif recherché. Il correspond à une ligne qui commence par // ou ##,
    #   suivie par un ou plusieurs caractères qui ne sont pas une étoile ([^*]+).
    #g: C'est un drapeau qui indique à sed de remplacer toutes les occurrences du motif dans chaque ligne (pas
    #   seulement la première).
    val=$(echo "$val" | sed -E "s/((\/\/)|(\#\#))([^*]+)/${GREEN_AUTO}&\o033[0m/g")
    echo -e "\t$val"
}
warn() {
    #Appelle la fonction color est ajoute un tab devant la chaine de caractère envoyer en argument
    color "\t$1"
}
line() {
    #Appelle la fonction color avec la chaine de caractère envoyer en argument
    color "$1"
}

pink() {
    #Affiche la chaine de caractère en PINK
    echo -e "${PINK}$1${NC}"
}
pts() {
    #Affiche un • en bold avec la chaine de caractère juste derrière
    echo -e "\t   $(bold •)$1"
}
ok() {
    #Affiche OK en vers
    echo -e "\t${GREEN}// OK${NC}"
}
incorrect() {
    #Affiche incorrect en vers
    echo -e "\t${GREEN}// incorrect${NC}"
}
italic() {
    #Affiche le texte en italique donné en argument
    echo -e "${ITALIQUE}$1${NC}"
}
#Parcours la liste qui contient les erreurs pour avoir leur documentation
for error in "${error_info[@]}"; do
    #Vérifie si error contient C-O1, si c'est le cas il affiche le titre et les
    #différentes informations. Cette condition est utilisée tout le temps ci dessous
    if [ "$error" = "C-O1" ]; then
        title "C-O1 - Contents Of The Repository"
        line "The Repository $(bold "must not") contain $(bold "compiled") (.o, .a, .so, ...), $(bold "temporary")"
        line "or $(bold "unnecessary") files (*-, #*#, ect)."
    elif [ "$error" = "C-O2" ]; then
        title "C-O2 - File Extension"
        line "Sources in a C program must $(bold only) have .c $(bold or) .h entensions."
    elif [ "$error" = "C-O3" ]; then
        title "C-O3 - File Coherence"
        line "A source file must match a $(bold "logical entity"), and group all the functions associated with that entity."
        line "Grouping functions that are $(bold "not related") to each other in the same file has to be $(bold avoided).\n"
        line "You are allowed to have $(bold "10 functions") (including at most $(bold "5 non-static functions")) in total per file."
        warn "Beyond these amounts, you $(bold must) subdivide your logical entity into several sub-entities."
    elif [ "$error" = "C-O4" ]; then
        title "C-O4 - Naming Files And Folders"
        line "The name of the file must define the logical entity it represents, and thus be $(bold "clear, precise, explicit and unambiguous")."
        warn "\n\t\tFor example, files like string.c or algo.c are probably incorrectly named."
        warn "Names like string_toolbox.c or pathfinding.c would be more appropriate.\n"
        line "All file names and folders must $(bold "be in English, according to the") snake_case $(bold convention) (that is, only composed of lowercase, numbers, and underscores)."
        warn "\n\t\tAbbreviations are tolered as a way to significantly reduce the sie of a name only if it does not lose its meaning.\n"
    elif [ "$error" = "C-G1" ]; then
        title "C-G1 - File Header"
        line "C files (.c, .h, ...) and every Makefiles must always stat with the $(bold "standard header") of the school."
        line "This header is created in Emacs using the Ctrl + c Ctrl + h command.\n"
        line "For C files:"
        line "/*\n\t** EPITECH PROJECT, \$YEAR\n\t** \$NAME_OF_THE_PROJECT\n\t** File description:\n\t** No file there, just an epitech header example.\n\t** You can even have multiple lines if you want !\n\t*/\n"
        line "For Makefiles"
        line "##\n\t## EPITECH PROJECT, \$YEAR\n\t## \$NAME_OF_THE_PROJECT\n\t## File description:\n\t## No file there, just an epitech header example.\n\t## You can even have multiple lines if you want !\n\t##"
        warn "\n\t\tAlways add a meaningful description of the file, you have a unlimited amount of line to do so.\n"
    elif [ "$error" = "C-G2" ]; then
        title "C-G2 - Separation Of Functions"
        line "Inside a source file, implementations of functions must be separated by $(bold "one and only one empty line".)"
    elif [ "$error" = "C-G3" ]; then
        title "C-G3 - Indentation Of Preprocessor Directives"
        line "The preprocessor directives must be $(bold indented according to the level of indirection).\n"
        warn "Indentation must be in the same way as in the C-L2 rule (groups of 4 spaces, no tabulations)."
        warn "$(bold "However"), preprocessor directives must be $(bold "indented independently of all the other code").\n"
        line "#ifndef WIN32"
        line "\tif defined(__i386__) || defined(__x86_64__)"
        line "const size_t PAGE_SIZE = 4096;"
        line "\t#else"
        line "\t\t#error $(pink "\"Unkown architecture\"")"
        line "\t#endif\n"
        line "struct coords {"
        line "\tint x;"
        line "\tint y;"
        line "};"
        line "#endif"
    elif [ "$error" = "C-G4" ]; then
        title "C-G4 - Global Variables"
        line "Global variables must be $(bold avoided) as much as possible."
        line "Only global $(bold constants) should be used.\n"
        warn "A constant is considered as such if and only if it is correctly marked with the const keyword."
        warn "Watch out, this keyword follows some particular and sometimes surprising rules!\n"
        line "const float GOLDEN_RATION = 1.61803398875\t/* OK */"
        line "int uptime = 0;\t\t\t\t\t/* C-G4 violation */"
    elif [ "$error" = "C-G5" ]; then
        title "C-G5 - Include"
        line "include directives must $(bold only) include C header (.h) files."
    elif [ "$error" = "C-G6" ]; then
        title "C-G6 - Line Endings"
        line "Line endings must be $(bold "done in UNIX style") (with \\\n)\n";
        warn "\\\r must not be used at all anywhere in the files.\n"
        warn "git config can help you keep your lines correctly ended."
    elif [ "$error" = "C-G7" ]; then
        title "C-G7 - Trailing Spaces"
        line "$(bold "No trailing spaces") must be present at the end of a line."
    elif [ "$error" = "C-G8" ]; then
        title "C-G8 - Leading/Trailing Lines"
        line "$(bold "No leading empty lines") must be present."
        line "$(bold "No more than 1 trailing empty line") must be present.\n"
        warn "Make sure you also follow the C-A3 rule."
    elif [ "$error" = "C-G9" ]; then
        title "C-G9 - Constant Values"
        line "$(bold "Non-trivial constant values") should be defined either as a global constant or as a macro.\n"
        line "This greatly helps you when you want to modify an important value in your program, because you do not"
        line "need to find all occurences of this value scattered throughout your code, and only need to change it"
        line "in one place."
    elif [ "$error" = "C-G10" ]; then
        title "C-G10 - Inline Assembly"
        line "$(bold "Inline assembly") must $(bold never) be used.\n"
        line "Programming in C must be done... in C."
    elif [ "$error" = "C-F1" ]; then
        title "C-F1 - Coherence Of Functions"
        line "A functions should only do $(bold "one thing") not mix different levels of abstraction, and respect the"
        line "single-responsinbility principle (a functions should be changed only for one reason).\n"
        warn "For example, a call to malloc(), a call allocate_user(), and a call to create_user() all have 3 different"
        warn "levels of abstraction.\n"
    elif [ "$error" = "C-F2" ]; then
        title "C-F2 - Naming Functions"
        line "The name of a function must $(bold "define the task it executes") and must $(bold "contain a verb.")\n"
        warn "For example, the vowels_nb() and dijkstra() functions are incorrectly named."
        warn "get_vowels_number() and search_shortest_path() are more meaningful and precise.\n"
        line "All function names must $(bold "be in English, according to the snake_case convention")"
        line "(meaning that it is composed only of lowercase, numbers = and underscores).\n"
        warn "Abbreviations are tolared if they significantly reduce the name without losing meaning."
    elif [ "$error" = "C-F3" ]; then
        title "C-F3 - Number Of Columns"
        line "The length of a line must not exceed $(bold "80 columns") (not to be confused with 80 characters).\n"
        warn "A tab represents 1 character, but several columns."
        warn "The line break character (\\\n) is part of the line, and thus counts in its length."
        warn "Even though this rule especially applies to functions, $(bold "it applies to all")"
        warn "$(bold "C files, as well as Makefiles.")\n"
    elif [ "$error" = "C-F4" ]; then
        title "C-F4 - Numbers Of Lines"
        line "The body of a function should be as $(bold "sort as possible"), and must not exceed $(bold "20 lines")."
        line "int main(void)\t\t\t/* this function is 2-line-long */"
        line {
        line "\tprintf($(pink "hello, world\\\\\\\n");"
        line "\treturn 0;"
        line }
    elif [ "$error" = "C-F5" ]; then
        title "C-F5 - Number Of Parameters"
        line "A function must not have more than $(bold "4 parameters")."
        line "Writing variadic functions is allowed, but they must not be used to circumvent the limit of 4 parameters.\n"
    elif [ "$error" = "C-F6" ]; then
        title "C-F6 - Functions Without Parameters"
        line "A function taking no parameters must take void as a parameter in the function declaration."
        line "phys_addr_t alloc_frame();\t\t/* C-F6 violation */"
        line "phys_addr_t alloc_frame(void);\t\t/* OK */\n"
        warn "The two syntaxes above have different meanings, and have different interisting behaviours."
    elif [ "$error" = "C-F7" ]; then
        title "C-F7 - Structures As Parameters"
        line "Structures must be passed to functions using a $(bold "pointer, not by copy").\n"
        line "void make_some_coffee(struct my_struct *board, int i);\t/* OK */"
        line "void make_some_coffee(struct my_struct board, int i);\t/* C-F7 violation */\n"
    elif [ "$error" = "C-F8" ]; then
        title "C-F8 - Comments Inside A Function"
        line "There $(bold "must be no comment") within a function."
        line "The function should be readable ans self-explanatory, without further need for explanations indide it.\n"
        warn "The length of a function is inversely proportional to its complexity, so a complicated"
        warn "function should be short."
        warn "In that case, a header comment (just above the prototype) should be enough to explain it\n"
    elif [ "$error" = "C-F9" ]; then
        title "C-F9 - Nested Functions"
        line "Nested functions are $(bold "not allowed"), because they are an extension f the GNU C standard, and because they"
        line "greatly increase complexity.\n"
    elif [ "$error" = "C-L1" ]; then
        title "C-L1 - Code Line Content"
        line "A line correspond to $(bold "only one statement")."
        line "Typical situations to avoid include:\n"
        pts "several assignments on the same line;"
        pts "several semicolons on the same line used to separated several statements;"
        pts "an assignment in a control structure expression;"
        pts "a condition and a statement on the same line."
        line "The only exception to this rule is the for loop control strcuture, for wich $(bold one)"
        line "statement is allowed in each of the three parts (intialization, loop condition, and"
        line "post-iteration operation)".
        line "a = b = c = 0;\t\t\t\t\t\tC-L1"
        line "a++; b++;\t\t\t\t\t\tC-L1"
        line "if ((ptr = malloc(sizeof(struct my_struct))) != NULL)\t/* C-L1 violation */"
        line "if (cond) return (ptr);\t\t\t\t\t/* C-L1 violation */"
        line "if (int i = 0; i < 42; i++) {\t\t\t\t/* OK */"
        line "\t..."
        line }
        line "if (int i = j = 0; i < 42; i++) {\t\t\t/* C-L1 violation */"
        line "\t..."
        line }
        line "if (int i = 0; i < 42; j--) {\t\t\t\t/* C-L1 violation */"
        line "\t..."
        line "}\n"
    elif [ "$error" = "C-L2" ]; then
        title "C-L2 - Indentation"
        line "Each indentation level must be done by using $(bold "4 spaces")."
        line "$(bold "No tabulations") may be used for indentation.\n"
        line "When entering a new scope (e.g.: control structure), the indentation level must be incremented."
        ok
        line "int main(void)"
        line {
        line "\tchar letter = $(pink "'H'");"
        line "\tint number = 14;\n"
        line "\tif (letter == $(pink "'H'")) {"
        line "\t\tmy_putchar($(pink "'U'"));"
        line "\t} else if (letter == $(pink "'G'")') {"
        line "\t\tif (number != 10)"
        line "\t\t\tmy_putchar($(pink "'O'"));"
        line "\t\telse {"
        line "\t\t\tmy_putchar(97);"
        line "\t\t}";
        line "\t}";
        line }
        incorrect
        line "int main(void)"
        line {
        line "int i;"
        line "}\n"
        incorrect
        line "int main(void)"
        line {
        line "\tif (true) {"
        line "\treturn (0);"
        line "\t}"
        line "}\n"
        line "${GREEN}incorrect and ugly"
        line "\t\t\tint main(void)"
        line "\t\t\t{"
        line "\t\tchar letter = $(pink "'H'");"
        line "\t\tint number = 14;\n"
        line "\tif (letter == $(pink "'H'")) {"
        line "\t\tmy_putchar($(pink "'U'"));"
        line "\t} else if (letter == $(pink "'G'")') {"
        line "\t\tif (number != 10)"
        line "\t\tmy_putchar($(pink "'O'"));"
        line "\t\telse {"
        line "\t\t\tmy_putchar(97);"
        line "\t}";
        line "\t}";
        line "}\n"
        line "Comment blocks'bodie canbe drelly indented (with spaces):"
        line "// The comment block below is valid, even though it is indented with only one space"
        line "/**"
        line " * @brief Something"
        line " *"
        line " * @param path"
        line " * @param void*"
        line " */"
        line "void *something(const char *path);\n"
    elif [ "$error" = "C-L3" ]; then
        title "C-L3 - Spaces"
        line "When using a space as a separator, $(bold "one and only one space") character must be used.\n"
        warn "Tabulations $(bold cannot) be used as a separator.\n"
        line "However, there must be $(bold spaces) between the nale of a function and the opening parenthesis, after a"
        line "unary operator, before a semcolon, or before a comma.\n"
        line "In the precise case of a for control structure, if a semicolon inside the parenthesis is not $(bold immediately)"
        line "followed by another semicolon, it $(bold must) be followed by a space."
        line "$(bold "All binary and ternary operators") must be separated from their arguments by a $(bold "space on both sides").\n"
        warn "return is a $(italic keyword), but sizeof is an unary operator.\n"
        line "return 1;\t\t\t\t/* OK */"
        line "return (1);\t\t\t\t/* OK */"
        line "return(1);\t\t\t\t/* C-L3 violation */"
        line "return(1 +  2);\t\t\t\t/* C-L3 violation */"
        line "break;\t\t\t\t\t/* OK */"
        line "break ;\t\t\t\t\t/* C-L3 violation */"
        line "add_numbers(1, 2);\t\t\t/* OK */"
        line "add_numbers(1 , 2);\t\t\t/* C-L3 violation */"
        line "sum = term1 + 2 * term2;\t\t/* OK */"
        line "s = sizeof(struct file);\t\t/* OK */"
        line "s = sizeof (struct file);\t\t/* C-L3 violation */"
        line "for (size_t i; str[i] != $(pink "'\\\\\\\0'"); i++) {\t/* OK */"
        line "\t..."
        line }
        line "for (size_t i;str[i] != $(pink "'\\\\\\\0'"); i++) {\t/* C-L3 violation */"
        line "\t..."
        line }
    elif [ "$error" = "C-L4" ]; then
        title "C-L4 - Curly Brackets"
        line "$(bold Opening) curly brackets must be $(bold "at the end of the line", after the content it precedes, except for functions)"
        line "definitions where they must be placed alone on their line."
        line "$(bold Closing) curly brackets must be $(bold "alone on their lin"), except in the case of else/else if/do while control"
        line "structures, enum declarations, or structure declarations (with or without an associated typedef).\n"
        warn "In the case of a single-line scope. omitting curly brackets is tolered, but you should"
        warn "think about all the modifications you will have to male if you want to add a new statement"
        warn "to the block. This can introduce some nasty bugs!\n"
        line "if (cond) {return ptr;}\t/* C-L1 & C-L4 violations */"
        line "while (cond) {\t\t/* OK */"
        line "\tdo_something();"
        line }
        line "if (cond)"
        line "{\t\t\t/* C-L4 violation */"
        line "\t..."
        line "} else {\t\t/* OK */"
        line "\t..."
        line }
        line "if (cond) {\t\t/* OK */"
        line "{\t\t\t/* C-L4 violation */"
        line "\t..."
        line "}"
        line "else {\t\t\t/* C-L4 violation */"
        line "\t..."
        line }
        line "if (cond)\t\t/* Tolerated */"
        line "\treturn ptr;"
        line "int print_env(void)\t/* OK */"
        line {
        line "\t..."
        line }
        line "int print_env(void) {\t/* C-L4 violation */"
        line "\t..."
        line }
        line "struct coord {\t\t/* OK */"
        line "\tint x;"
        line "\tint y;"
        line "};"
        line "struct coord\t\t/* C-L4 violation */"
        line }
        line "\tint x;"
        line "\tint y;"
        line "};\n"
        warn "Even though this primarily applies to the contents of functions, $(bold "this rule also applies to")"
        warn "$(bold "code outside functions"), including header files."
    elif [ "$error" = "C-L5" ]; then
        title "C-L5 - Variable Declarations"
        line "Variables must be declared $(bold "at the beginning of the function")."
        line "$(bold "Only one variable") must be declared per statement.\n"
        line "The for control structures ay also optionally declare a variable in their intialization part.\n"
        warn "Nothing prevents you from declaring and assigning a variable on the same line.\n"
        line "long calculate_gcd(long) a, long b)"
        line {
        line "\tlong biggest, smallest;\t\t/* C-L5 violation */\n"
        line "\tbiggest = MAX(a, b);"
        line "\tsmallest = MIN(a, b);"
        line "\tlong rest;\t\t\t\t/* C-L5 violation */"
        line "\twhile (smallest > 0) {"
        line "\t\trest = biggest % smallest;"
        line "\t\tbiggest = smallest;"
        line "\t}"
        line "\treturn a;"
        line "}\n"
        line "int main(void)\t\t\t\t\t\t/* OK */"
        line {
        line "\tint forty_two = 42;\t\t\t\t/* OK */"
        line "\tint max = 12;\t\t\t\t\t/* OK */\n"
        line "\tfor (unsigned int i = 0; i < max; i++) {\t/* OK */"
        line "\t\tcalculate_gcd(forty_two, max);"
        line "\treturn 0;"
        line "}\n"
    elif [ "$error" = "C-L6" ]; then
        title "C-L6 - Blank Lines"
        line "A blank line must $(bold "separate the variable declarations from the remainder") of the function."
        line "No other black lines msut be present in the function.\n"
        line "long sys_open(const *path)"
        line "{"
        line "\tint fd = thread_reserve_fd();"
        line "\tstruct filehandler *fhandler = NULL;"
        line "\t\t\t\t\t\t/* OK */"
        line "\tif (fd < 0) {"
        line "\t\treturn -1;"
        line "\t}"
        line "\tif (fs_open(path, &fhandler)) {"
        line "\t\tthread_free_fd(fd);"
        line "\t\treturn -1;"
        line "\t\t\t\t\t\t/* C-L6 violation */"
        line "\tthread_set_fd_handler(fg, fhandler);"
        line "\treturn fd;"
        line "}\n"
        warn "No blank line is necessary if there are no variable declarations in the function.\n"
    elif [ "$error" = "C-V1" ]; then
        title "C-V1 - Naming Identifiers"
        line "All identifier names msut $(bold "be in English, according to the snake_case convention") (meaning it is composed"
        line "exclusively of lowercase, numbers, and underscores).\n"
        line "The type names defined with typedef must $(bold "end with") _t."
        line "The names of $(bold "macros and global constants") and the content of $(bold enums) must be written is UPPER_SNAKE_CASE.\n"
        line ""#define" IS_PAGE_ALIGNED(x) (!((x) & (PAGE_SIZE - 1)))\t/* OK */"
        line "enum arch {\t\t\t\t\t\t/* OK */"
        line "\tI168 = 0,"
        line "\tX86_64,"
        line "\tARM,"
        line "\tARM64,"
        line "\tSPARC,"
        line "\tPOWERPC,"
        line "};"
        line "const float PI = 3.14159;\t\t\t\t/* OK */"
        line "typedef int age;\t\t\t\t\t/* C-V1 violation */"
        line "typedef strucr int_couple pixel_t;\t\t\t/* OK */\n"
        warn "Abbreviations are tolared as long as they significantly reduce the name legth without"
        warn "losing meaning.\n"
    elif [ "$error" = "C-V2" ]; then
        title "C-V2 - Structures"
        line "Variables can be grouped together into a structure if and only they form $(bold "a coherent entity")."
        line "Structures must be kept $(bold "as small as possible").\n"
        line "struct person {\t\t\t/* OK */"
        line "\tchar *name;"
        line "\tunsigned int age;"
        line "\tfloat salary;"
        line "};"
        line "struct data {\t\t\t/* C-V2 violation */"
        line "\tstruct person player;"
        line "\tunsigned int width;"
        line "\tunsigned int length;"
        line "\tunsigned int score;"
        line "\tint i;"
        line "};"
    elif [ "$error" = "C-V3" ]; then
        title "C-V3 - Pointers"
        line "The asterisk (*) must be $(bold "attached to the associated variable"), with no spaces in between."
        line "It must also be $(bold "preceded by a space"), except when it is itself preceded by another asterisk."
        line "This includes using the asterisk to declare or dereference a pointer.\n"
        line "When used in a casr, the asterisk must have a space on tis left side, but not its right side.\n"
        line "int *a;\t\t\t\t\t\t/* OK */"
        line "int* a;\t\t\t\t\t\t/* C-V3 violation */"
        line "int*a;\t\t\t\t\t\t/* C-V3 violation */"
        line "char **argv;\t\t\t\t\t/* OK */"
        line "char**argv;\t\t\t\t\t/* C-V3 violation */"
        line "char * *argv;\t\t\t\t\t/* C-V3 violation */"
        line "char ** argv;\t\t\t\t\t/* C-V3 violation */"
        line "int a = 3 * b;\t\t\t\t\t/* OK */"
        line "int strlen(char const *str);\t\t\t/* OK */"
        line "int strlen(char const* str);\t\t\t/* OK */"
        line "my_put_nbr(*ptr);\t\t\t\t/* OK */"
        line "my_put_nbr(* ptr);\t\t\t\t/* C-V3 violation */"
        line "char *my_strdup(char const *str)\t\t/* OK */"
        line "char* my_strdup(char const *str\t\t\t/* C-V3 violation */"
        line "(int *) ptr;\t\t\t\t\t/* OK */"
        line "(int*) ptr;\t\t\t\t\t/* C-V3 violation */"
        line "(int* ) ptr;\t\t\t\t\t/* C-V3 violation */"
        line "void (*func_ptr)(int) = &func;\t\t\t/* OK */"
        line "(*func_ptr)(42);\t\t\t\t/* OK */\n"
        warn "This rule applies only in the pointer context."
    elif [ "$error" = "C-C1" ]; then
        title "C-C1 - Conditional Branching"
        line "A Conditional block (while, for, if, else, ...) $(bold "must not contain more than 3 branches").\n"
        warn "Arrays of function pointers and switch instructions are very useful when you want to"
        warn "have numerous different behaviours that can result from the check of an element."
        warn "Take care to choose the most suitable one."
        line "$(bold "Nested conditional branches") with a depth of 3 or more must be avoided.\n"
        warn "If you need multiple levels of branches, you probably need to refactor your function into"
        warn "sub-functions.\n"
        line "if (...) {\t\t\t\t/* OK */"
        line "\tdo_something();"
        line "} else if (...) {"
        line "\tdo_something_else();"
        line "} else {"
        line "\tdo_something_more();";
        line "}\n"
        line "if (...) {"
        line "\tdo_something()";
        line "} else if (...) {"
        line "\tdo_something_else();"
        line "} else if (...) {"
        line "\tdo_something_more();"
        line "} else {\t\t\t\t/* C-C1 violation */"
        line "\tdo_one_last_thing();"
        line "}\n"
        line "while (...) {"
        line "\tif (...) {"
        line "\t\tdo_something();\t\t/* OK */"
        line "\t}"
        line "}\n"
        line "while (...) {\t\t\t\t/* C-C1 violation */"
        line "\tfor (...) {"
        line "\t\tif (...) {"
        line "\t\t\tdo_something ()"
        line "\t\t}"
        line "\t}"
        line "}\n"
        warn "else if branching does not add one, but two levels of depth, as it is considered"
        warn "to be an if inside an else.\n"
        line "// This code ..."
        line "if (...) {"
        line "\tdo_something ();"
        line "} else if (...) {"
        line "\tdo_something_else();"
        line "} else if (...) {\t\t\t/* C-C1 violation */"
        line "\tdo_something_else();"
        line "}\n"
        line "// ... is unfolded as this"
        line "if (...) {"
        line "\tdo_something();"
        line "} else {"
        line "\tif (...) {"
        line "\t\tdo_something_else();"
        line "\t} else {"
        line "\t\tif (...) {\t\t\t/* C-C1 violation */"
        line "\t\t\tdo_one_last_thing();"
        line "\t\t}"
        line "\t}"
        line "}\n"
    elif [ "$error" = "C-C2" ]; then
        title "C-C2 - Ternary Operators"
        line "The use of ternary operators is $(bold "allowed as far as it is kept simple and readable"), and"
        line "if it does not obfuscate code.\n"
        warn "You must never use $(bold "nested") or $(bold "chained ternary operators")."
        warn "You must $(bold "always use the value") produced by a ternary operator (by assigning it to a variable"
        warn "or returning it for example).\n"
        line "parity_t year_parity = (year % 2 == 0) ? EVEN : ODD;\t\t\t/* OK */"
        line "return (a > 0 ? a : 0);\t\t\t\t\t\t\t/* OK */"
        line "unsigned int safe_sum = is_sum_overflow (a, b) ? 0 : a + b;\t\t/* OK */"
        line "char *result = is_ correctly_formatted(str) ? str : format ( str );\t/* OK */"
        line "int a = b > 10 ? c < 20 ? 50 : 80 : e == 2 ? 4 : 8;\t\t\t/* C-C2 violation */"
        line "already_checked ? go_there() : check();\t\t\t\t\t/* C-C2 violation */"
        line "first() ? second() : 0;\t\t\t\t\t\t\t/* C-C2 violation */\n"
    elif [ "$error" = "C-C3" ]; then
        title "C-C3 - goto"
        line "Using the goto $(bold "keyword is forbidden"), because it can very quickly participate in the creation of infamous"
        line "spaghetti code, which is completely illegible.\n"
    elif [ "$error" = "C-H1" ]; then
        title "C-H1 - Content"
        line "Header files must only contain:"
        line "$(bold "• function prototypes,")"
        line "$(bold "• type declarations,")"
        line "$(bold "• structure declarations,")"
        line "$(bold "• enumeration declarations,")"
        line "$(bold "• global variable/constant declarations,")"
        line "$(bold "• macros,")"
        line "$(bold "• static inline functions.")\n"
        line "All these elements must $(bold "only") be found in header files, and thus not in source files.\n"
        warn "Including a header from another header is allowed as long as the header file itself needs"
        warn "it."
        warn "If a source file requires it, but not the header file itself, it should then be included in the"
        warn "source file instead.\n"
    elif [ "$error" = "C-H2" ]; then
        title "C-H2 - Include Guard"
        line "Headers must be protected from $(bold "double inclusion")."
        line "The method and the conventions used are left free.\n"
    elif [ "$error" = "C-H3" ]; then
        title "C-H3 - Macros"
        line "Macros must match $(bold "only one statement"), and $(bold "fit on a single line")."
        line "#define PI\t\t3.14159265358979323846\t\t/* OK */"
        line "#define DELTA(a, b, c)\t((b) * (b) - 4 * (a) * (c))\t/* OK */"
        line "#define PRINT_NEXT(num)\t{num++; printf(\"%d\", num);}\t/* C-H3 violation */"
        line "#define ERROR_MESSAGE \"Multiline macros\" \\"
        line "\t\t\" have to be avoided\t\t\t/* C-H3 violation\" */\n"
        warn "Using a macro to shorten a long expression is rarely a valid reason to use a macro:"
        warn "// Unnecessary and obfuscates the code"
        warn "#define WIN (data->object->scene->state->window)\n"
    elif [ "$error" = "C-A1" ]; then
        title "C-A1 - Constant Pointers"
        line "When creating a pointer, if the pointed data is not (or should not be) modified by the function, it should be"
        line "marked as $(bold "constant") (const).\n"
    elif [ "$error" = "C-A2" ]; then
        title "C-A2 - Typing"
        line "Prefer the $(bold "most accurate types possible") according to the use of the data.\n"
        line "int counter;\t\t\t\t\t\t/* C-A2 violation */"
        line "unsigned int counter;\t\t\t\t\t/* OK */"
        line "unsigned int get_obj_size(void const *object)\t\t/* C-A2 violation */"
        line "size_t get_obj_size(void const *object)\t\t\t/* OK */\n"
        warn "Useful types include size_t, ptrdiff_t, uint8_t, int32_t, and more...\n"
    elif [ "$error" = "C-A3" ]; then
        title "C-A3 - Line Break At The End Of File"
        line "Files must $(bold "end with a line break").\n"
        line "${GREEN}∼</Epitech Documentation> cat -e correct.c${NC}"
        line "int main(void) {$"
        line "\treturn 0;$"
        line "}$"
        line "${GREEN}∼</Epitech Documentation> cat -e incorrect.c${NC}"
        line "int main(void) {$"
        line "\treturn 0;$"
        line "}\n"
        line "The reason for this is tied to the POSIX’s definition of a line:\n"
        warn "A sequence of zero or more non- <newline> characters plus a terminating <newline> character."
        warn "\t\t\t\tThe Open Group Base Specifications Issue 7, 2018 edition\n"
    elif [ "$error" = "C-A4" ]; then
        title "C-A4 - static"
        line "Global variables and functions that are not used outside the compilation unit to which they belong should"
        line "be $(bold "marked with the") static $(bold keyword).\n"
        warn "Be careful not to confuse the different uses of the static keyword. It does very different"
        warn "things depending on where you use it."\n
    fi
done
