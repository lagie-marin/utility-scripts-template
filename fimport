#!/bin/bash
################################################################################
# Script: fimport
# Description: 
#   Utilitaire pour importer des fonctions préenregistrées dans un projet.
#   Ce script récupère des fonctions à partir d'un fichier JSON centralisé
#   et les intègre dans le projet courant avec toutes leurs dépendances.
#
# Fonctionnalités:
#   - Détection automatique du langage de programmation du projet
#   - Importation de fonctions avec leurs dépendances
#   - Importation des fichiers d'en-tête associés
#   - Importation des macros nécessaires
#   - Structuration automatique du projet (création des dossiers src, include)
#   - Vérification de compatibilité de langage
#
# Utilisation: 
#   ./fimport [-h] [-u] <nom_fonction> [<nom_fonction> ...]
#
# Options:
#   -h            Affiche cette aide
#   -u            Met à jour le script à partir du dépôt GitHub
#
# Arguments:
#   nom_fonction   Nom de la fonction à importer (plusieurs noms possibles)
#
# Prérequis:
#   - jq doit être installé (sudo apt install jq)
#   - Fichier JSON d'export ($HOME/.fcp/functions_exports.json)
#
# Configuration:
#   Un fichier .fcp/.current_language doit exister dans le projet pour
#   spécifier le langage utilisé.
#
################################################################################

# Fonction pour afficher l'aide
show_help() {
    echo "fimport - Utilitaire pour importer des fonctions préenregistrées dans un projet"
    echo ""
    echo "Usage: fimport [options] <function_name> [<function_name> ...]"
    echo ""
    echo "Options:"
    echo "  -h                Affiche cette aide"
    echo "  -u                Met à jour le script à partir du dépôt GitHub"
    echo ""
    echo "Arguments:"
    echo "  function_name     Nom de la fonction à importer (plusieurs noms possibles)"
    echo ""
    echo "Description:"
    echo "  Ce script récupère des fonctions à partir d'un fichier JSON centralisé"
    echo "  et les intègre dans le projet courant avec toutes leurs dépendances."
    echo ""
    echo "Configuration requise:"
    echo "  - jq doit être installé (sudo apt install jq)"
    echo "  - Fichier JSON d'export (\$HOME/.fcp/functions_exports.json)"
    echo "  - Fichier de langage du projet (./.fcp/.current_language)"
    echo ""
    echo "Exemples:"
    echo "  fimport ma_fonction            # Importe une seule fonction"
    echo "  fimport func1 func2 func3      # Importe plusieurs fonctions"
    exit 0
}

# Fonction pour mettre à jour le script
# Fonction: update_command
update_script() {
    echo "Checking for updates..."
    
    # Vérifier si script-manager est installé
    if command -v script-manager &>/dev/null; then
        echo "Running update via script-manager..."
        if script-manager fimport; then
            echo "Update completed successfully!"
        else
            echo "Error: Update failed"
            return 1
        fi
    else
        echo "Error: script-manager not found"
        echo "Please install script-manager first"
        return 1
    fi
}

# Traitement des options
while getopts "hu" opt; do
    case $opt in
        h)
            show_help
            ;;
        u)
            update_script
            ;;
        \?)
            echo "Option invalide: -$OPTARG" >&2
            echo "Utilisez -h pour afficher l'aide." >&2
            exit 1
            ;;
    esac
done

# Ajuste les arguments pour ignorer les options traitées
shift $((OPTIND-1))

# Vérifie que jq est installé
if ! command -v jq &> /dev/null; then
    echo "Erreur: jq n'est pas installé. Installez-le avec 'sudo apt install jq'."
    exit 1
fi

# Définit les chemins des fichiers de configuration
JSON_FILE="$HOME/.fcp/functions_exports.json"
project_config_dir="$(pwd)/.fcp"
current_language_file="$project_config_dir/.current_language"

# Vérifie que le fichier JSON existe
if [ ! -f "$JSON_FILE" ]; then
    echo "Erreur: Fichier JSON d'export introuvable: $JSON_FILE"
    exit 1
fi

# Vérifie les arguments
if [ $# -lt 1 ]; then
    echo "Erreur: Aucune fonction spécifiée."
    echo "Usage: fimport [options] <function_name> [<function_name> ...]"
    echo "Utilisez -h pour afficher l'aide."
    exit 1
fi

echo "Langage du projet: $CURRENT_LANG"

# Récupère le langage du fichier JSON - modification pour prendre la première clé
JSON_LANG=$(jq -r 'keys[0]' "$JSON_FILE")

# Vérifie que les langages correspondent
if [ "$CURRENT_LANG" != "$JSON_LANG" ]; then
    echo "Erreur: Le langage du projet ($CURRENT_LANG) ne correspond pas au langage du fichier JSON ($JSON_LANG)"
    exit 1
fi

# Crée les dossiers nécessaires
mkdir -p src include

# Fonction: import_function
# Description:
#   Importe une fonction à partir du fichier JSON avec toutes ses dépendances
#   Les dépendances sont également importées récursivement
# Paramètres:
#   $1 - Le nom de la fonction à importer
#   $2 - Liste des fonctions déjà importées (pour éviter les imports en double)
# Retour:
#   0 si la fonction est importée avec succès
#   1 si la fonction n'existe pas dans le fichier JSON
import_function() {
    local func_name="$1"
    local already_imported="$2"
    
    # Vérifie si la fonction existe dans le JSON - avec la structure corrigée
    if ! jq -e --arg name "$func_name" --arg lang "$CURRENT_LANG" '.[$lang].functions[$name]' "$JSON_FILE" > /dev/null 2>&1; then
        echo "Avertissement: Fonction '$func_name' introuvable dans le fichier JSON."
        return 1
    fi
    
    # Vérifie si la fonction a déjà été importée
    if [[ "$already_imported" == *" $func_name "* ]]; then
        return 0
    fi
    
    # Marque la fonction comme importée
    already_imported="$already_imported $func_name "
    
    echo "Importation de la fonction: $func_name"
    
    # Récupère les informations de la fonction
    local file_path=$(jq -r --arg name "$func_name" --arg lang "$CURRENT_LANG" '.[$lang].functions[$name].file_path' "$JSON_FILE")
    local content=$(jq -r --arg name "$func_name" --arg lang "$CURRENT_LANG" '.[$lang].functions[$name].content' "$JSON_FILE")
    local includes=$(jq -r --arg name "$func_name" --arg lang "$CURRENT_LANG" '.[$lang].functions[$name].includes' "$JSON_FILE")
    local dependencies=$(jq -r --arg name "$func_name" --arg lang "$CURRENT_LANG" '.[$lang].functions[$name].dependencies // ""' "$JSON_FILE")
    
    # Détermine le nom du fichier de destination
    local basename=$(basename "$file_path")
    local dest_dir="src/$(dirname "$file_path" | sed 's/^\.\/src\///' | sed 's/^\.\/source\///' | sed 's/^\.\/sources\///')"
    
    # Crée le répertoire de destination si nécessaire
    mkdir -p "$dest_dir"
    
    # Chemin complet du fichier de destination
    local dest_file="$dest_dir/$basename"
    
    # Vérifie si le fichier existe déjà
    if [ -f "$dest_file" ]; then
        echo "  Fichier '$dest_file' existe déjà, mise à jour..."
    else
        echo "  Création du fichier: $dest_file"
    fi
    
    # Crée le fichier avec le contenu de la fonction
    echo "/*" > "$dest_file"
    echo " * Fichier importé via FCP (Fast Command Project)" >> "$dest_file"
    echo " * Fonction: $func_name" >> "$dest_file"
    echo " * Date: $(date)" >> "$dest_file"
    echo " */" >> "$dest_file"
    echo "" >> "$dest_file"
    
    # Ajoute les includes
    IFS=$'\n'
    for inc in $includes; do
        if [ -n "$inc" ]; then
            echo "#include \"$inc\"" >> "$dest_file"
        fi
    done
    echo "" >> "$dest_file"
    
    # Ajoute le contenu de la fonction
    echo "$content" >> "$dest_file"
    
    # Importe les headers nécessaires - avec la structure corrigée
    for inc in $includes; do
        if [ -n "$inc" ]; then
            # Vérifie si le header existe dans le JSON
            if jq -e --arg path "./include/$inc" --arg lang "$CURRENT_LANG" '.[$lang].headers[$path]' "$JSON_FILE" > /dev/null 2>&1; then
                local header_content=$(jq -r --arg path "./include/$inc" --arg lang "$CURRENT_LANG" '.[$lang].headers[$path].content' "$JSON_FILE")
                
                # Crée le fichier header s'il n'existe pas
                if [ ! -f "include/$inc" ]; then
                    echo "  Importation du header: $inc"
                    mkdir -p "$(dirname "include/$inc")"
                    echo "$header_content" > "include/$inc"
                fi
            fi
        fi
    done
    
    # Importe les macros nécessaires - avec la structure corrigée
    for macro in $(echo "$dependencies" | tr ' ' '\n' | grep -v "^$"); do
        # Vérifie si c'est une macro
        if jq -e --arg name "$macro" --arg lang "$CURRENT_LANG" '.[$lang].macros[$name]' "$JSON_FILE" > /dev/null 2>&1; then
            local macro_content=$(jq -r --arg name "$macro" --arg lang "$CURRENT_LANG" '.[$lang].macros[$name].content' "$JSON_FILE")
            local macro_file=$(jq -r --arg name "$macro" --arg lang "$CURRENT_LANG" '.[$lang].macros[$name].file' "$JSON_FILE")
            
            local macro_basename=$(basename "$macro_file")
            
            echo "  Importation de la macro: $macro"
            
            # Assure que le header existe et contient la macro
            if [ ! -f "include/$macro_basename" ]; then
                if jq -e --arg path "$macro_file" --arg lang "$CURRENT_LANG" '.[$lang].headers[$path]' "$JSON_FILE" > /dev/null 2>&1; then
                    local header_content=$(jq -r --arg path "$macro_file" --arg lang "$CURRENT_LANG" '.[$lang].headers[$path].content' "$JSON_FILE")
                    echo "  Importation du header pour la macro: $macro_basename"
                    mkdir -p "$(dirname "include/$macro_basename")"
                    echo "$header_content" > "include/$macro_basename"
                fi
            fi
        fi
    done
    
    # Importe récursivement les dépendances - avec la structure corrigée
    for dep in $(echo "$dependencies" | tr ' ' '\n' | grep -v "^$"); do
        # Vérifie si c'est une fonction et non une macro
        if jq -e --arg name "$dep" --arg lang "$CURRENT_LANG" '.[$lang].functions[$name]' "$JSON_FILE" > /dev/null 2>&1; then
            import_function "$dep" "$already_imported"
            already_imported="$already_imported $dep "
        fi
    done
    
    return 0
}

# Liste des fonctions importées
IMPORTED=""

# Programme principal: importe chaque fonction demandée
# Pour chaque argument fourni, appelle import_function
for func in "$@"; do
    import_function "$func" "$IMPORTED"
    IMPORTED="$IMPORTED $func "
done

echo "Importation terminée. Vérifiez les fichiers créés pour tout ajustement nécessaire."