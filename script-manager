#!/bin/bash
set -euo pipefail

PING_TARGET="www.google.com"
#Vérifie si l'utilisateur est connecter à internet, si ce n'est pas le cas
#le script s'arrete
if ! ping -c 1 "$PING_TARGET" &> /dev/null; then
    exit 1
fi
#REPO_URL est le chemin où se trouve les fichiers à télécharger
REPO_URL="https://raw.githubusercontent.com/lagie-marin/utility-scripts-template/main/"
#DOWNLOAD_PTR_URL est l'URL qui permet d'acceder au fichier à télécharger
#ou à mettre à jour
DOWNLOAD_PTR_URL="$REPO_URL/download.ptr"
#SCRIPTS est une liste qui contient les fichiers à télécharger
#curl est un outil en ligne de commande pour transférer des données depuis
#   ou vers un serveur
#-s rend curl silencieux, c'est-à-dire qu'il ne montre pas la barre de progression
#-L permet à curl de suivre les redirections si le serveur rapporte que la
#   ressource demandée a été déplacée
#head -n 1 affiche la première ligne de l'input
SCRIPTS=($(curl -s -L "$DOWNLOAD_PTR_URL" | head -n 1))
#LOCAL_FOLDER contient le dossier de destination final pour les dossiers
LOCAL_FOLDER="/usr/local/bin"
#DEST_FOLDER contient le dossier où les fichiers seronts télécharger
DEST_FOLDER="/usr/utility-scripts-template"
#get_library_repo permet de récupérer le lien vers le repo où se situe la lib
#de l'utilisateur.
function get_library_repo {
    while true; do
        #Attend l'entré de l'utilisateur
        #read permet de lire une entrée de l'utilisateur
        #-p: permet d'afficher un message d'invite avant de lire l'entrée.
        read -rp "Enter the HTTPS link to the library repository: " lib_repo
        #On vérifie que l'utilisateur à bien rentré la bonne URL.
        #^https://.*\.git$ est une expression régulière qui permet de vérifier
        #   que l'utilisateur à bien rentrée la bonne URL.
        #     _      Si l'utilisateur rentre une adresse valide c'est
        #    / \     à dire qu'il commence par https:// et qu'il se
        #   / | \    termine par .git mais que ça ne pointe pas vers
        #  /  |  \   le bon repo ou qu'il n'a pas la bonne structure,
        # /       \  vous risquez d'avoir des problèmes lorsque vous
        #/____O____\ utiliserez getlib. La structure actuelle est:
        #/lib/my + Makefile
        if [[ "$lib_repo" =~ ^https://.*\.git$ ]]; then
            #Permets d'ajouter une ligne à la 6 lignes
            #sed est l'éditeur de flux, qui peut être utilisé pour transformer du texte
            #-i: signifie que sed modifiera le fichier en place, c'est-à-dire qu'il écrira
            #   les modifications directement dans le fichier plutôt que de les afficher à l'écran
            #"6i git clone $lib_repo" : C'est l'expression que sed exécutera sur le fichier.
            #   6i signifie "insérer à la ligne 6"
            sudo sed -i "6i git clone $lib_repo" "$LOCAL_FOLDER/$script"
            break
        else
            #Affiche une erreur si l'URL ne respecte pas la bonne syntaxe
            echo "Invalid URL. It should start with 'https://' and end with '.git'. Please try again."
        fi
    done
}
#Nous parcourons l'ensemble des fichiers à vérifier pour que les modifications soient
#appliquées si nécessaire.
#@ est utilisé pour accéder à tous les éléments du tableau.
for script in "${SCRIPTS[@]}"; do
    #curl est un outil en ligne de commande pour transférer des données depuis ou vers
    #   un serveur.
    #-s rend curl silencieux, c'est-à-dire qu'il ne montre pas la barre de progression.
    #-L permet à curl de suivre les redirections si le serveur rapporte que la ressource
    #   demandée a été déplacée.
    github_version=$(curl -s -L "$REPO_URL/$script")
    echo -n "$script"
    #Vérifie que le script getlib sois autoriser dans les configuration
    if [ "$script" == "getlib" ] && [ "$(get_config LIB)" == "true" ]; then
        #Vérifie que le fichier existe
        if [ -f "$LOCAL_FOLDER/$script" ]; then
            #lit le contenu du fichier spécifié par "$LOCAL_FOLDER/$script" et stocke ce contenu
            #dans la variable local_version
            local_version=$(cat "$LOCAL_FOLDER/$script")
        else
            #wget est un outil en ligne de commande pour télécharger des fichiers depuis le web.
            #-q rend wget silencieux, sauf lors de l'affichage des erreurs.
            #--show-progress force wget à afficher la progression du téléchargement même en mode silencieux.
            #-O spécifie le fichier de sortie, ici $DEST_FOLDER/$script. Enfin, $REPO_URL/$script est l'URL
            #du fichier à télécharger.
            sudo wget -q --show-progress -O "$LOCAL_FOLDER/$script" "$REPO_URL/$script"
            # sudo wget -q --show-progress -O "$REPO_URL$script" "$DEST_FOLDER$script"
            #En résumé, cette commande rend le fichier spécifié par $LOCAL_FOLDER/$script exécutable.
            sudo chmod +x "$LOCAL_FOLDER/$script"
            #Informe à l'utilisateur que le fichier a bien été téléchargé
            echo "$script has been downloaded."
            #Récupère la version du fichier de github
            local_version=$(echo "$github_version")
        fi
        #Vérifie si la valeur de script est "getlib" et si le résultat de get_config LIB est "true".
        #get_config est une commande qui permet d'accéder à la configuration globale des scripts.
        #Elle peut être modifiée à tout moment par l'utilisateur.
        if [ "$script" == "getlib" ] && [ "$(get_config LIB)" == "true" ]; then
            #Lit la 6ème ligne du fichier
            #-n supprime l'affichage automatique, ce qui signifie que sed n'affiche rien sauf si
            #une instruction explicite le demande.
            #"6p" est une instruction qui demande à sed d'afficher la 6ème ligne
            clone_data=$(sed -n "6p" "$LOCAL_FOLDER/$script")
            #Vérifie que la valeur de clone_data est différente de "git clone https"
            if [[ "$clone_data" != "git clone https"* ]]; then
                #Appelle la fonction get_library_repo
                get_library_repo
            fi
            #cat "$LOCAL_FOLDER/$script" : il affiche le contenu de ce fichier.
            #sed '6d' est une commande qui supprime la 6ème ligne du texte qu'elle reçoit.
            local_version=$(cat "$LOCAL_FOLDER/$script" | sed '6d')
        fi
        #Vérifie que la version local est différente de c'elle de github si c'est le cas il va mettre
        #à jour le script en question
        if [[ "$local_version" != "$github_version" ]]; then
            #wget est un outil en ligne de commande pour télécharger des fichiers depuis le web.
            #-q rend wget silencieux, sauf lors de l'affichage des erreurs.
            #--show-progress force wget à afficher la progression du téléchargement même en mode silencieux.
            #-O spécifie le fichier de sortie, ici $DEST_FOLDER/$script. Enfin, $REPO_URL/$script est l'URL
            #du fichier à télécharger.
            sudo wget -q --show-progress -O "$DEST_FOLDER/$script" "$REPO_URL/$script"
            # écrit la valeur de github_version dans le fichier spécifié par "$LOCAL_FOLDER/$script",
            #sans afficher cette valeur dans la console.
            #tee est une commande Unix qui lit de l'entrée standard et écrit à la fois dans l'entrée
            #   standard et dans un ou plusieurs fichiers
            #> /dev/null : Cette partie de la commande redirige la sortie standard de la commande tee
            #   vers /dev/null, qui est un fichier spécial qui supprime tout ce qui est écrit dedans.
            #   Cela signifie que la valeur de github_version ne sera pas affichée dans la console,
            #   mais seulement écrite dans le fichier.
            echo "$github_version" | sudo tee "$LOCAL_FOLDER/$script" > /dev/null
            #En résumé, cette commande rend le fichier spécifié par $LOCAL_FOLDER/$script exécutable.
            sudo chmod +x "$LOCAL_FOLDER/$script"
            #Vérifie si la valeur de script est "getlib" et si le résultat de get_config LIB est "true".
            #get_config est une commande qui permet d'accéder à la configuration globale des scripts.
            #Elle peut être modifiée à tout moment par l'utilisateur.
            if [ "$script" == "getlib" ] && [ "$(get_config LIB)" == "true" ]; then
                #Vérifie que la valeur de clone_data est égal de "git clone https"
                if [[ "$clone_data" == "git clone https"* ]]; then
                    #Permets d'ajouter une ligne à la 6 lignes
                    #sed est l'éditeur de flux, qui peut être utilisé pour transformer du texte
                    #-i: signifie que sed modifiera le fichier en place, c'est-à-dire qu'il écrira
                    #   les modifications directement dans le fichier plutôt que de les afficher à l'écran
                    #"6i git clone $lib_repo" : C'est l'expression que sed exécutera sur le fichier.
                    #   6i signifie "insérer à la ligne 6"
                    sudo sed -i "6i git clone $lib_repo" "$LOCAL_FOLDER/$script"
                else
                    #Appelle la fonction get_library_repo
                    get_library_repo
                fi
            fi
            #Indique à l'utilisateur que le fichier est bien mis à jour
            echo "$script update done."
        fi
    fi
    echo " OK"
done
