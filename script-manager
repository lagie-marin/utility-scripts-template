#!/bin/bash

PING_TARGET="https://raw.githubusercontent.com"
# Vérifie si l'utilisateur est connecté à Internet, sinon le script s'arrête
if ! ping -c 1 "$PING_TARGET" &> /dev/null; then
    exit 1
fi

# REPO_URL est le chemin où se trouvent les fichiers à télécharger
REPO_URL="https://raw.githubusercontent.com/lagie-marin/utility-scripts-template/main/"
# DOWNLOAD_PTR_URL est l'URL qui permet d'accéder au fichier à télécharger ou à mettre à jour
DOWNLOAD_PTR_URL="$REPO_URL/download.ptr"

# Si des arguments sont passés, ils sont utilisés comme liste de commandes
if [ "$#" -gt 0 ]; then
    SCRIPTS=("$@")
else
    # Sinon, récupère la liste des scripts par défaut depuis le fichier distant
    SCRIPTS=($(curl -s -L "$DOWNLOAD_PTR_URL" | head -n 1))
fi

# LOCAL_FOLDER contient le dossier de destination final pour les scripts
LOCAL_FOLDER="/usr/local/bin"
# DEST_FOLDER contient le dossier où les fichiers seront téléchargés
DEST_FOLDER="/usr/utility-scripts-template"

# get_library_repo permet de récupérer le lien vers le repo où se situe la lib de l'utilisateur.
function get_library_repo {
    while true; do
        # Attend l'entrée de l'utilisateur
        # read permet de lire une entrée de l'utilisateur
        # -p : permet d'afficher un message d'invite avant de lire l'entrée.
        read -rp "Enter the HTTPS link to the library repository: " lib_repo
        # On vérifie que l'utilisateur a bien rentré la bonne URL.
        # ^https://.*\.git$ est une expression régulière qui permet de vérifier
        # que l'utilisateur a bien rentré une URL valide (commence par https:// et finit par .git).
        if [[ "$lib_repo" =~ ^https://.*\.git$ ]]; then
            # Permet d'ajouter une ligne à la 6ème ligne
            # sed est l'éditeur de flux, qui peut être utilisé pour transformer du texte
            # -i : signifie que sed modifiera le fichier en place
            # "6i git clone $lib_repo" : insère "git clone $lib_repo" à la ligne 6
            sudo sed -i "6i git clone $lib_repo" "$LOCAL_FOLDER/$script"
            break
        else
            # Affiche une erreur si l'URL ne respecte pas la bonne syntaxe
            echo "Invalid URL. It should start with 'https://' and end with '.git'. Please try again."
        fi
    done
}

# Nous parcourons l'ensemble des fichiers à vérifier pour que les modifications soient appliquées si nécessaire.
# @ est utilisé pour accéder à tous les éléments du tableau.
for script in "${SCRIPTS[@]}"; do
    # curl est un outil en ligne de commande pour transférer des données depuis ou vers un serveur.
    # -s rend curl silencieux, c'est-à-dire qu'il ne montre pas la barre de progression.
    # -L permet à curl de suivre les redirections si le serveur rapporte que la ressource demandée a été déplacée.
    github_version=$(curl -s -L "$REPO_URL/$script")
    # Vérifie que le script getlib est autorisé dans les configurations
    if [ "$script" == "getlib" ] && [ "$(get_config LIB)" == "true" ] || [ "$script" != "getlib" ]; then
        # Vérifie que le fichier existe
        if [ -f "$LOCAL_FOLDER/$script" ]; then
            # Lit le contenu du fichier spécifié par "$LOCAL_FOLDER/$script" et stocke ce contenu
            # dans la variable local_version
            local_version=$(cat "$LOCAL_FOLDER/$script")
        else
            # wget est un outil en ligne de commande pour télécharger des fichiers depuis le web.
            # -q rend wget silencieux, sauf lors de l'affichage des erreurs.
            # --show-progress force wget à afficher la progression du téléchargement même en mode silencieux.
            # -O spécifie le fichier de sortie, ici $LOCAL_FOLDER/$script.
            sudo wget -q --show-progress -O "$LOCAL_FOLDER/$script" "$REPO_URL/$script"
            # Vérifie si le téléchargement a réussi
            if [ $? -ne 0 ]; then
                echo "Error: Failed to download '$script'. File not found on the server."
                continue
            fi
            # Rend le fichier spécifié par $LOCAL_FOLDER/$script exécutable.
            sudo chmod +x "$LOCAL_FOLDER/$script"
            # Informe l'utilisateur que le fichier a bien été téléchargé
            echo "$script has been downloaded."
            # Récupère la version du fichier de GitHub
            local_version=$(echo "$github_version")
        fi
        # Vérifie si la valeur de script est "getlib" et si le résultat de get_config LIB est "true".
        if [ "$script" == "getlib" ] && [ "$(get_config LIB)" == "true" ]; then
            # Lit la 6ème ligne du fichier
            clone_data=$(sed -n "6p" "$LOCAL_FOLDER/$script")
            # Vérifie que la valeur de clone_data est différente de "git clone https"
            if [[ "$clone_data" != "git clone https"* ]]; then
                # Appelle la fonction get_library_repo
                get_library_repo
            fi
            # Supprime la 6ème ligne du fichier local pour comparaison
            local_version=$(cat "$LOCAL_FOLDER/$script" | sed '6d')
        fi
        # Vérifie que la version locale est différente de celle de GitHub
        if [[ "$local_version" != "$github_version" ]]; then
            # Télécharge la nouvelle version du script
            sudo wget -q --show-progress -O "$DEST_FOLDER/$script" "$REPO_URL/$script"
            # Écrit la nouvelle version dans le fichier local
            echo "$github_version" | sudo tee "$LOCAL_FOLDER/$script" > /dev/null
            # Rend le fichier exécutable
            sudo chmod +x "$LOCAL_FOLDER/$script"
            # Si le script est "getlib", met à jour la ligne de clonage si nécessaire
            if [ "$script" == "getlib" ] && [ "$(get_config LIB)" == "true" ]; then
                if [[ "$clone_data" == "git clone https"* ]]; then
                    sudo sed -i "6i git clone $lib_repo" "$LOCAL_FOLDER/$script"
                else
                    get_library_repo
                fi
            fi
            # Informe l'utilisateur que le script a été mis à jour
            echo "$script update done."
        fi
    else
        # Vérifie si la commande getlib existe
        if [ -f "$LOCAL_FOLDER/$script" ] && [ "$script" == "getlib" ]; then
            # Supprime le fichier
            sudo rm "$LOCAL_FOLDER/$script"
            echo "uninstall $script"
        fi
    fi
done